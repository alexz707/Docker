name: Build Wingbits Docker Images

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      #linux-386 linux-arm darwin-arm64
      GOOSARCH_LIST: "linux-amd64 linux-arm64"
      DOCKER_BUILDKIT: 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y jq

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get Wingbits versions
        run: |
          VERSIONS=()
          IMAGEEXISTS=()
          ALLIMAGEEXISTS=true
          echo "Start checking following architectures: ${GOOSARCH_LIST[*]}"
          for GOOSARCH in $GOOSARCH_LIST; do
            echo "----------------------------------------"
            echo "📦 Checking architecture: $GOOSARCH"
            URL="https://install.wingbits.com/$GOOSARCH.json"
            echo "🌐 Fetching version from: $URL"
            VERSION=$(curl -s --retry 5 --retry-connrefused --retry-delay 3 "$URL" | grep -o '"Version": "[^"]*"' | cut -d'"' -f4)
            echo "🔢 Found version: $VERSION"
            VERSIONS+=("$VERSION")

            IMAGE="alexz707/wingbits:${VERSION}"
            OS="${GOOSARCH%%-*}"
            ARCH="${GOOSARCH#*-}"
            
            echo "🔎 Check if $IMAGE supports $OS/$ARCH"
            if docker manifest inspect "$IMAGE" | jq -e \
              --arg os "$OS" --arg arch "$ARCH" \
              '.manifests[] | select(.platform.os == $os and .platform.architecture == $arch)' > /dev/null; then
              echo "✅ Architecture $OS/$ARCH supported"
              IMAGEEXISTS+=("true")
            else
              echo "❌ Architecture $OS/$ARCH missing"
              IMAGEEXISTS+=("false")
              ALLIMAGEEXISTS=false
            fi
          done
          echo "========================================"
          echo "Results:"
          for i in "${!GOOSARCH_LIST[@]}"; do
            echo "🧩 ${GOOSARCH_LIST[i]}: Version ${VERSIONS[i]}, Existiert: ${IMAGEEXISTS[i]}"
          done
          
          if $ALLIMAGEEXISTS; then
            echo "All images exist."
          else
            echo "At least one image is missing."
          fi
          
          UNIQUE_VERSIONS=$(echo "${VERSIONS[*]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo "VERSIONS=${UNIQUE_VERSIONS}" >> $GITHUB_ENV
          echo "IMAGEEXISTS=${IMAGEEXISTS[*]}" >> $GITHUB_ENV
          echo "ALLIMAGEEXISTS=$ALLIMAGEEXISTS" >> $GITHUB_ENV

      - name: Build and push Docker images
        if: env.ALLIMAGEEXISTS == 'false'
        run: |
          IFS=' ' read -r -a VERSION_ARRAY <<< "$VERSIONS"
          IFS=' ' read -r -a GOOSARCH_ARRAY <<< "$GOOSARCH_LIST"
          DOCKER_OS_ARCH_LIST=$(echo "$GOOSARCH_LIST" | sed -e 's/-/\//g' -e 's/ /,/g')
          for VERSION_TAG in "${VERSION_ARRAY[@]}"; do
            echo "Building image for version: $VERSION_TAG"
            docker buildx build --platform $DOCKER_OS_ARCH_LIST \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/wingbits:latest \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/wingbits:$VERSION_TAG --push wingbits
          done

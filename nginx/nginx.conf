# HTTP: Redirect to HTTPS
server {
    listen 80;
    server_name localhost;

    # Redirect all HTTP traffic to HTTPS with status 307
    location / {
        return 307 https://$host$request_uri;
    }
}

# HTTPS Server with Security Enhancements
server {
    listen 443 ssl http2;
    server_name localhost;

    # SSL Certificates
    ssl_certificate     /etc/nginx/cert/server.crt;
    ssl_certificate_key /etc/nginx/cert/server.key;

    # Strong SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # HTTP Strict Transport Security (HSTS)
    #add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Security Headers
    add_header X-Frame-Options "DENY" always;                       # Clickjacking protection
    add_header X-Content-Type-Options "nosniff" always;             # Prevent MIME-type sniffing
    add_header Referrer-Policy "no-referrer" always;                # Prevent sensitive data leaks
    add_header Content-Security-Policy "default-src 'self';" always; # Basic CSP
    add_header X-XSS-Protection "1; mode=block" always;             # Cross-site scripting protection
    add_header Permissions-Policy "geolocation=(), microphone=()" always; # Disable certain browser features

    # Logs
    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log warn;

    # Limit Request Size
    client_max_body_size 2M;

    # Timeouts to mitigate slowloris attacks
    client_body_timeout 10;
    client_header_timeout 10;
    keepalive_timeout 15;
    send_timeout 10;

    # Basic Rate Limiting (optional)
    #limit_req_zone $binary_remote_addr zone=api_limit:10m rate=30r/m;

    # Document Root
    root /var/www/public;
    index index.php index.html;

    # Pass Authorization header to PHP
    proxy_set_header Authorization $http_authorization;

    # Static files served directly
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP handling with dynamic selection for Xdebug
    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;

        # Apply rate limiting to PHP endpoints
        #limit_req zone=api_limit burst=10 nodelay;

        # Check for Xdebug session in cookie or query string
        if ($cookie_XDEBUG_SESSION = "PHPSTORM") {
            fastcgi_pass php-fpm-debug:9000;
        }
        if ($query_string ~* "XDEBUG_SESSION=PHPSTORM") {
            fastcgi_pass php-fpm-debug:9000;
        }

        # Default to normal PHP-FPM
        fastcgi_pass php-fpm:9000;

        # FastCGI settings
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param HTTP_AUTHORIZATION $http_authorization;

        # Prevent PHP files from being downloaded
        set $deny_download 0;
        if ($uri ~* "\.php$") {
            set $deny_download 1;
        }
        if ($deny_download) {
            return 403;
        }
    }

    # Block access to hidden files and directories
    location ~ /\.(?!well-known) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Prevent access to certain sensitive directories
    location ~* /(composer\.lock|composer\.json|package\.json|package-lock\.json|\.git|\.env) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Allow .htaccess-style overrides (simulated with nginx)
    location ~ /\.ht {
        deny all;
    }
}
